name: Continuous Integration & Docker Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main]
  workflow_dispatch:

env:
  SUPABASE_URL: ${{ secrets.SUPABASE_URL || 'https://xyzcompanytest.supabase.co' }}
  SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY || 'demo-service-key' }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.12'
  REGISTRY: ghcr.io
  IMAGE_PREFIX: woran7867/archon
  PYTHONPATH: /app

jobs:
  # -------------------- Frontend Tests --------------------
  frontend-tests:
    name: Frontend Tests (React + Vitest)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./archon-ui-main
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: archon-ui-main/package-lock.json
      - run: npm ci
      # 后续可解开 ESLint / Vitest

  # -------------------- Backend Tests --------------------
  backend-tests:
    name: Backend Tests (Python + pytest)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./python
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
      - run: uv python install ${{ env.PYTHON_VERSION }}
      - run: |
          uv sync --dev
          uv add pytest-cov
      - run: uv run pytest tests/ --cov=src --cov-report=xml

  # -------------------- Docker Build Test --------------------
  docker-build-test:
    name: Docker Build Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [server, mcp, agents, frontend]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - run: |
          case "${{ matrix.service }}" in
            server)
              docker build -f python/Dockerfile.server -t archon-server:test \
                --build-arg PYTHONPATH_ARG=${{ env.PYTHONPATH }} \
                python/
              ;;
            mcp)
              docker build -f python/Dockerfile.mcp -t archon-mcp:test \
                --build-arg PYTHONPATH_ARG=${{ env.PYTHONPATH }} \
                python/
              ;;
            agents)
              docker build -f python/Dockerfile.agents -t archon-agents:test \
                --build-arg PYTHONPATH_ARG=${{ env.PYTHONPATH }} \
                python/
              ;;
            frontend)
              docker build -t archon-frontend:test archon-ui-main/
              ;;
          esac

  # -------------------- Docker Build & Push --------------------
  docker-build-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, docker-build-test]
    strategy:
      matrix:
        include:
          - service: archon-server
            context: ./python
            file: ./python/Dockerfile.server
          - service: archon-mcp
            context: ./python
            file: ./python/Dockerfile.mcp
          - service: archon-agents
            context: ./python
            file: ./python/Dockerfile.agents
          - service: archon-frontend
            context: ./archon-ui-main
            file: ./archon-ui-main/Dockerfile
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push ${{ matrix.service }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.file }}
          push: true
          build-args: |
            PYTHONPATH_ARG=${{ env.PYTHONPATH }}
          tags: |
            ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:latest
            ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ github.sha }}

  # -------------------- Test Results Summary --------------------
  test-summary:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, docker-build-test, docker-build-push]
    if: always()
    steps:
      - run: |
          echo "# 🧪 Archon CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Frontend tests done" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Backend tests done" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Docker build tested" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 Images pushed to registry: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
